plot(cars)
install.packages("alakazam")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("shazam")
library(alakazam)
install.packages("Biostrings")
library(ggplot2)
library(shazam)
library(alakazam)
library(dplyr)
library(ggplot2)
library(shazam)
install.packages(c("alakazam", "dplyr", "ggplot2", "shazam"))
library(alakazam)
db %>% count(sample_id)
db %>% count(sample_id)
db %>% count(sample_id)
db %>% count(sample_id)
data(ExampldDb, package='alakazam')
set.seed(112)
db <- ExampleDb %>% sample_n(size=500)
data(ExampldDb, package='alakazam')
set.seed(112)
db <- ExampleDb %>% sample_n(size=500)
data(ExampldDb, package='alakazam')
set.seed(112)
db <- ExampleDb %>% sample_n(size=500)
data(ExampldDb, package='alakazam')
set.seed(112)
db <- ExampleDb %>% sample_n(size=500)
data(ExampldDb, package='alakazam')
set.seed(112)
db <- ExampleDb %>% sample_n(size=500)
data(ExampldDb, package='alakazam')
set.seed(112)
db <- ExampleDb %>% sample_n(size=500)
data(ExampleDb, package='alakazam')
set.seed(112)
db <- ExampleDb %>% sample_n(size=500)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
library(alakazam)
install.packages("GenomicAlignments")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicAlignments")
library(alakazam)
library(alakazam)
library(dplyr)
library(alakazam)
library(dplyr)
library(ggplot2)
library(alakazam)
library(dplyr)
library(ggplot2)
library(shazam)
library(alakazam)
library(dplyr)
library(ggplot2)
library(shazam)
data(ExampleDb, package='alakazam')
set.seed(112)
db <- ExampleDb %>% sample_n(size=500)
db %>% count(sample_id)
View(ExampleDb)
data(ExampleDb, package='alakazam')
data(ExampleDb, package='alakazam')
db <- ExampleDb
db
data('../Data/IgPhyML_input_sjogren_S8_add_d_gene_IGHV1-69.tsv', package='alakazam')
data('../Data/IgPhyML_input/sjogren/S8_add_d_gene_IGHV1-69.tsv', package='alakazam')
data('../Data/IgPhyML_input/sjogren/S8_add_d_gene_IGHV1-69.tsv', package='alakazam')
data('../Data/IgPhyML_input/sjogren/S8_add_d_gene_IGHV1-69.tsv', package='alakazam')
data('../Data/IgPhyML_input/sjogren/S8_add_d_gene_IGHV1-69.tsv', package='alakazam')
View(ExampleDb)
df <- read.table('../Data/IgPhyML_input/sjogren/S8_add_d_gene.tsv', header=TRUE, sep = '\t')
data <- read.table('../Data/IgPhyML_input/sjogren/S8_add_d_gene.tsv', header=TRUE, sep = '\t')
data <- read.table('../Data/IgPhyML_input/sjogren/S8_add_d_gene.tsv', sep = '\t')
data <- read.table('../Data/IgPhyML_input/sjogren/S8_add_d_gene.tsv', sep = '\t')
data <- read.table("../Data/IgPhyML_input/sjogren/S8_add_d_gene.tsv", sep = '\t')
data <- read.table("../Data/IgPhyML_input/sjogren/S8_add_d_gene_IGHV1-69.tsv", sep = '\t')
data <- read.table("../Data/IgPhyML_input/sjogren/S8_add_d_gene_IGHV1-69.tsv", header=TRUE, sep = '\t')
View(data)
dist_ham <- distToNearest(data %>% sequenceColumn="junction", vCallColumn="v_call", jCallColumn='j_call', model='ham', normalize='len', nproc=1)
dist_ham <- distToNearest(data %>% sequenceColumn ='sequence', vCallColumn="v_call", jCallColumn='j_call', model='ham', normalize='len', nproc=1)
dist_ham <- distToNearest(data %>% sequenceColumn ='sequence', vCallColumn="v_call", jCallColumn='j_call', model='ham', normalize='len', nproc=1)
data <- read.table("../Data/IgPhyML_input/sjogren/S8_add_d_gene_IGHV1-69.tsv", header=TRUE, sep = '\t')
dist_ham <- distToNearest(data %>% sequenceColumn ='junction', vCallColumn="v_call", jCallColumn='j_call', model='ham', normalize='len', nproc=1)
dist_ham <- distToNearest(data, sequenceColumn ='junction', vCallColumn="v_call", jCallColumn='j_call', model='ham', normalize='len', nproc=1)
View(data)
View(data)
dist_ham <- distToNearest(data, model='ham', normalize='len', nproc=1)
dist_ham <- distToNearest(data, model='ham', normalize='len', nproc=1)
dist_ham <- distToNearest(data, model='ham', normalize='len', nproc=1)
dist_ham <- distToNearest(data, model='ham', normalize='len', nproc=1)
data <- read.table("../Data/IgPhyML_input/sjogren/S8_add_d_gene_IGHV1-69.tsv", header=TRUE, sep = '\t')
data <- read.table("../Data/IgPhyML_input/sjogren/S8_add_d_gene.tsv", header=TRUE, sep = '\t')
dist_ham <- distToNearest(data %>% filter(v_call == "IGHV1-69"), model='ham', normalize='len', nproc=1)
data <- read.table("../Data/IgPhyML_input/sjogren/S8_add_d_gene.tsv", header=TRUE, sep = '\t')
dist_ham <- distToNearest(data %>% filter(v_call == "IGHV1-69"), model='ham', normalize='len', nproc=1)
p1 <- ggplot(subset(dist_ham, !is.na(dist_nearest)),
aes(x=dist_nearest)) +
geom_histogram(color="white", binwidth=0.02) +
geom_vline(xintercept=0.12, color="firebrick", linetype=2) +
labs(x = "Hamming distance", y = "Count") +
scale_x_continuous(breaks=seq(0, 1, 0.1)) +
theme_bw()
plot(p1)
output <- findThreshold(dist_ham$dist_nearest, method="density")
threshold <- output@threshold
plot(output, title = "Deisity Method")
output <- findThreshold(dist_ham$dist_nearest, method="density")
threshold <- output@threshold
plot(output, title = "Density Method")
output <- findThreshold(dist_ham$dist_nearest, method="density")
threshold <- output@threshold
plot(output, title = "Density Method")
print(output)
output <- findThreshold(dist_ham$dist_nearest, method="density")
threshold <- output@threshold
plot(output, title = "Density Method")
print(output)
p1 <- ggplot(subset(dist_ham, !is.na(dist_nearest)),
aes(x=dist_nearest)) +
geom_histogram(color="white", binwidth=0.01) +
geom_vline(xintercept=0.12, color="firebrick", linetype=2) +
labs(x = "Hamming distance", y = "Count") +
scale_x_continuous(breaks=seq(0, 1, 0.1)) +
theme_bw()
plot(p1)
p1 <- ggplot(subset(dist_ham, !is.na(dist_nearest)),
aes(x=dist_nearest)) +
geom_histogram(color="white", binwidth=0.01) +
geom_vline(xintercept=0.173, color="firebrick", linetype=2) +
labs(x = "Hamming distance", y = "Count") +
scale_x_continuous(breaks=seq(0, 1, 0.1)) +
theme_bw()
plot(p1)
data <- read.table("../Data/IgPhyML_input/sjogren/S8_add_d_gene.tsv", header=TRUE, sep = '\t')
dist_ham <- distToNearest(data %>% filter(v_call == "IGHV1-69"), model='ham', normalize='len', nproc=1)
output <- findThreshold(dist_ham$dist_nearest, method="density")
threshold <- output@threshold
plot(output, title = "Density Method")
print(output)
list.files('../Data/IgPhyML_input/sjogren')
list.files('../Data/IgPhyML_input/sjogren')
thresholds = c()
for (file in list.files('../Data/IgPhyML_input/sjogren')){
data <- read.table("../Data/IgPhyML_input/sjogren/S8_add_d_gene.tsv", header=TRUE, sep = '\t')
dist_ham <- distToNearest(data %>% filter(v_call == "IGHV1-69"), model='ham', normalize='len', nproc=1)
output <- findThreshold(dist_ham$dist_nearest, method="density")
threshold <- output@threshold
plot(output, title = "Density Method")
print(output)
}
thresholds = c()
for (file in list.files('../Data/IgPhyML_input/sjogren')){
data <- read.table(file.path('../Data/IgPhyML_input/sjogren/', file), header=TRUE, sep = '\t')
dist_ham <- distToNearest(data %>% filter(v_call == "IGHV1-69"), model='ham', normalize='len', nproc=1)
output <- findThreshold(dist_ham$dist_nearest, method="density")
threshold <- output@threshold
plot(output, title = "Density Method")
print(output)
}
thresholds = c()
for (file in list.files('../Data/IgPhyML_input/sjogren')){
data <- read.table(file.path('../Data/IgPhyML_input/sjogren/', file), header=TRUE, sep = '\t')
dist_ham <- distToNearest(data %>% filter(v_call == "IGHV1-69"), model='ham', normalize='len', nproc=1)
output <- findThreshold(dist_ham$dist_nearest, method="density")
threshold <- output@threshold
plot(output, title = "Density Method")
print(output, file)
thresholds[file] <- output
}
thresholds = c()
for (file in list.files('../Data/IgPhyML_input/sjogren')){
data <- read.table(file.path('../Data/IgPhyML_input/sjogren/', file), header=TRUE, sep = '\t')
dist_ham <- distToNearest(data %>% filter(v_call == "IGHV1-69"), model='ham', normalize='len', nproc=1)
output <- findThreshold(dist_ham$dist_nearest, method="density")
threshold <- output@threshold
plot(output, title = "Density Method")
print(output)
print(file)
thresholds[file] <- output
}
thresholds = c("name" == "value")
for (file in list.files('../Data/IgPhyML_input/sjogren')){
data <- read.table(file.path('../Data/IgPhyML_input/sjogren/', file), header=TRUE, sep = '\t')
dist_ham <- distToNearest(data %>% filter(v_call == "IGHV1-69"), model='ham', normalize='len', nproc=1)
output <- findThreshold(dist_ham$dist_nearest, method="density")
threshold <- output@threshold
plot(output, title = "Density Method")
print(output)
print(file)
thresholds[file] <- output
}
thresholds = c("name" = "value")
for (file in list.files('../Data/IgPhyML_input/sjogren')){
data <- read.table(file.path('../Data/IgPhyML_input/sjogren/', file), header=TRUE, sep = '\t')
dist_ham <- distToNearest(data %>% filter(v_call == "IGHV1-69"), model='ham', normalize='len', nproc=1)
output <- findThreshold(dist_ham$dist_nearest, method="density")
threshold <- output@threshold
plot(output, title = "Density Method")
print(output)
print(file)
thresholds[file] <- output
}
thresholds = c("name" = "value")
for (file in list.files('../Data/IgPhyML_input/sjogren')){
data <- read.table(file.path('../Data/IgPhyML_input/sjogren/', file), header=TRUE, sep = '\t')
dist_ham <- distToNearest(data %>% filter(v_call == "IGHV1-69"), model='ham', normalize='len', nproc=1)
output <- findThreshold(dist_ham$dist_nearest, method="density")
threshold <- output@threshold
plot(output, title = "Density Method")
print(output)
print(file)
}
thresholds = c("name" = "value")
for (file in list.files('../Data/IgPhyML_input/sjogren')){
data <- read.table(file.path('../Data/IgPhyML_input/sjogren/', file), header=TRUE, sep = '\t')
dist_ham <- distToNearest(data %>% filter(v_call == "IGHV1-69"), model='ham', normalize='len', nproc=1)
# Find threshold using gmm method
output <- findThreshold(dist_ham$dist_nearest, method="gmm", model="gamma-gamma")
# Plot distance histogram, Gaussian fits, and optimum threshold
plot(output, binwidth=0.02, title="GMM Method: gamma-gamma")
print(output)
print(file)
}
View(data)
for (file in list.files('../Data/IgPhyML_input/sjogren')){
data <- read.table(file.path('../Data/IgPhyML_input/sjogren/', file), header=TRUE, sep = '\t')
dist_ham <- distToNearest(data %>% filter(v_call == "IGHV1-69"), model='ham', normalize='len', nproc=1)
p1 <- ggplot(subset(dist_ham, !is.na(dist_nearest)),
aes(x=dist_nearest)) +
geom_histogram(color="white", binwidth=0.02) +
geom_vline(xintercept=0.12, color="firebrick", linetype=2) +
labs(x = "Hamming distance", y = "Count") +
scale_x_continuous(breaks=seq(0, 1, 0.1)) +
theme_bw()
plot(p1)
}
for (file in list.files('../Data/IgPhyML_input/sjogren')){
data <- read.table(file.path('../Data/IgPhyML_input/sjogren/', file), header=TRUE, sep = '\t')
dist_ham <- distToNearest(data %>% filter(v_call == "IGHV1-69"), model='ham', normalize='len', nproc=1)
p1 <- ggplot(subset(dist_ham, !is.na(dist_nearest)),
aes(x=dist_nearest)) +
geom_histogram(color="white", binwidth=0.005) +
labs(x = "Hamming distance", y = "Count") +
scale_x_continuous(breaks=seq(0, 1, 0.05)) +
theme_bw()
plot(p1)
print(file)
}
for (file in list.files('../Data/IgPhyML_input/sjogren')){
data <- read.table(file.path('../Data/IgPhyML_input/sjogren/', file), header=TRUE, sep = '\t')
dist_ham <- distToNearest(data %>% filter(v_call == "IGHV1-69"), model='ham', normalize='len', nproc=1)
p1 <- ggplot(subset(dist_ham, !is.na(dist_nearest)),
aes(x=dist_nearest)) +
geom_histogram(color="white", binwidth=0.005) +
labs(x = "Hamming distance", y = "Count") +
scale_x_continuous(breaks=seq(0, 1, 0.05)) +
theme_bw()
plot(p1)
print(file)
}
library(alakazam)
library(dplyr)
library(ggplot2)
library(shazam)
library(alakazam)
library(dplyr)
library(ggplot2)
library(shazam)
for (file in list.files('../Data/IgPhyML_input/sjogren')){
data <- read.table(file.path('../Data/IgPhyML_input/sjogren/', file), header=TRUE, sep = '\t')
dist_ham <- distToNearest(data %>% filter(v_call == "IGHV1-69"), model='ham', normalize='len', nproc=1)
p1 <- ggplot(subset(dist_ham, !is.na(dist_nearest)),
aes(x=dist_nearest)) +
geom_histogram(color="white", binwidth=0.005) +
labs(x = "Hamming distance", y = "Count") +
scale_x_continuous(breaks=seq(0, 1, 0.05)) +
theme_bw()
plot(p1)
print(file)
}
